version: 2.1

orbs:
  # docker: circleci/docker@2.0.1
  kubernetes: circleci/kubernetes@1.3.0
  aws-eks: circleci/aws-eks@2.1.0

# executors:
#   python:
#     docker:
#       - image: circleci/python:3.7.3-stretch
#   aws:
#     docker:
#     - image: amazon/aws-cli

jobs:
  run-lint:
    docker:
      - image: circleci/python:3.7.3-stretch
    working_directory: ~/repo
    steps:
      - checkout
      # - restore_cache:
      #     keys:
      #       - v1-dependencies-{{ checksum "requirements.txt" }}
      #       - v1-dependencies-
      - run:
          name: install dependencies
          command: |
              python3 -m venv venv
              . venv/bin/activate
              make install
              wget -O ./hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
              chmod +x ./hadolint
      # - save_cache:
      #     paths:
      #       - ./.capstone
      #     key: v1-dependencies-{{ checksum "requirements.txt" }}
      # run lint!
      - run:
          name: Run lint
          command: |
              . venv/bin/activate
              make lint 

  # build-docker-image:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - checkout
  #     - setup_remote_docker:
  #         version: 19.03.13
  #     - run:
  #         name: Build Docker Image
  #         command: |
  #             docker build -t capstone .
  #             docker image ls

  push-docker-image:
    machine: true
    steps:
      - checkout
      - run:
          name: Push Docker Image
          command: |
              docker login -u ${DOCKER_USERNAME} -p ${DOCKER_PWD}
              docker build -t oketcbb/capstone:${CIRCLE_WORKFLOW_ID:0:7} .
              docker push oketcbb/capstone:${CIRCLE_WORKFLOW_ID:0:7}
              docker tag oketcbb/capstone:${CIRCLE_WORKFLOW_ID:0:7} oketcbb/capstone:latest
              docker push oketcbb/capstone:latest

          # docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
          # docker tag capstone oketcbb/capstone
          # echo "Docker ID and Image: oketcbb/capstone"
          # docker push oketcbb/capstone

    # deploy-kubernetes:
    #   executor: aws-eks/python3
    #   steps:
    #     - checkout
    #     - run:
    #       name: create cluster
    #     - run:
    #       name: deploy kubernetes cluster
    #       command: |
    #         aws eks --region us-east-1 update-kubeconfig --name capstone
    #     # kubectl config use-context arn:aws:eks:us-east-1:731488622603:cluster/capstone
    #         kubectl get nodes
    #         kubectl get pods --all-namespaces
    #         kubectl apply -f eks_deployment.yml
    #         kubectl get deployment



workflows:
  deployment:
    jobs:
      - run-lint
      # - build-docker-image
      - push-docker-image
          # requires: [build-docker-image]
      # - deploy-kubernetes:
      #     requires:
      #       - [upload-image]