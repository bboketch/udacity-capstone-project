version: 2.1

jobs:
  run-lint:
    docker:
      - image: circleci/python:3.7.3-stretch
    working_directory: ~/repo
    steps:
      - checkout
      # - restore_cache:
      #     keys:
      #       - v1-dependencies-{{ checksum "requirements.txt" }}
      #       - v1-dependencies-
      - run:
          name: install dependencies
          command: |
              python3 -m venv venv
              . venv/bin/activate
              make install
              wget -O ./hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
              chmod +x ./hadolint
      # - save_cache:
      #     paths:
      #       - ./.capstone
      #     key: v1-dependencies-{{ checksum "requirements.txt" }}
      # run lint!
      - run:
          name: Run lint
          command: |
              . venv/bin/activate
              make lint 

  build-docker-image:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - setup_remote_docker:
          version: 19.03.13
      - run:
          name: Build Docker Image
          command: |
              docker system prune
              docker build -t capstone-project:8654tag .
              docker image ls
              echo "logging into Docker Hub"
              docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD 
              echo "Tag image"
              docker tag capstone-project:8654tag oketcbb/capstone-project.8654tag
              echo "Pushing images to Docker Hub"
              docker push oketcbb/capstone-project.8654tag

  # create-cluster:
  #   executor: aws-eks/python3
  #   parameters:
  #     cluster-name:
  #       description: |
  #         capstone-project
  #       type: string
  #     aws-region:
  #       description: |
  #         AWS region
  #       type: string
  #       default: "us-east-1"
  #   steps:
  #     - checkout
  #     - aws-eks/install-aws-iam-authenticator:
  #         release-tag: ''
  #     - run:
  #         name: Install the eksctl tool
  #         command: |
  #           if which eksctl > /dev/null; then
  #           echo "eksctl is already installed"
  #           exit 0
  #           fi
  #           mkdir -p eksctl_download
  #           curl --silent --location --retry 5 "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C eksctl_download
  #           chmod +x eksctl_download/eksctl
  #           SUDO=""
  #           if [ $(id -u) -ne 0 ] && which sudo > /dev/null ; then
  #           SUDO="sudo"
  #           fi
  #           $SUDO mv eksctl_download/eksctl /usr/local/bin/
  #           rmdir eksctl_download
  #     - aws-eks/create-cluster:
  #         cluster-name: << parameters.cluster-name >>
  #         skip-kubectl-install: false
  #         aws-region: << parameters.aws-region >>
  #         verbose: 3
  #         node-type: t2.small
  #         nodes-max: 2
  #         ssh-access: false
  #         ssh-public-key: ''
          

  deploy-cluster:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          eksctl-capstone-project-cluster
        type: string
    steps:
      - checkout
      - kubernetes/install
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          install-kubectl: true
      - kubernetes/create-or-update-resource:
          get-rollout-status: true
          resource-file-path: eks_deployment.yml
          resource-name: deployment/capstone-project
  
  # test-cluster:
  #   executor: aws-eks/python3
  #   parameters:
  #     cluster-name:
  #       description: |
  #         capstone-project
  #       type: string
  #   steps:
  #     - kubernetes/install
  #     - aws-eks/update-kubeconfig-with-authenticator:
  #         cluster-name: << parameters.cluster-name >>
  #     - run:
  #         name: Test cluster
  #         command: |
  #           kubectl get svc
  #           kubectl get nodes
  #           kubectl get pods
  #           kubectl get deployment

    # deploy-kubernetes:
    #   executor: aws-eks/python3
    #   steps:
    #     - checkout
    #     - run:
    #       name: create cluster
    #     - run:
    #       name: deploy kubernetes cluster
    #       command: |
    #         aws eks --region us-east-1 update-kubeconfig --name capstone
    #     # kubectl config use-context arn:aws:eks:us-east-1:731488622603:cluster/capstone
    #         kubectl get nodes
    #         kubectl get pods --all-namespaces
    #         kubectl apply -f eks_deployment.yml
    #         kubectl get deployment


orbs:
  aws-eks: circleci/aws-eks@1.0.3
  kubernetes: circleci/kubernetes@1.0

workflows:
  deployment:
    jobs:
      - run-lint
      - build-docker-image
      # - create-cluster:
      #     cluster-name: capstone-project
      #     requires: [build-docker-image]
      - deploy-cluster:
          cluster-name: capstone-project
          requires: [create-cluster]
      # - test-cluster:
      #     cluster-name: capstone-project
      #     requires: [create-cluster]
      # - aws-eks/update-container-image:
      #     cluster-name: eks-demo-deployment
      #     container-image-updates: 'nginx=nginx:1.9.1'
      #     post-steps:
      #       - kubernetes/delete-resource:
      #           resource-names: nginx-deployment
      #           resource-types: deployment
      #           wait: true
      #     requires:
      #       - create-deployment
      #     resource-name: deployment/nginx-deployment
  